# -*- coding: utf-8 -*-
"""cifar_cnn_pytorch_to_py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HriCPO1SAlQPqhMJuHgRvjV4WCU3fUgT

Training an image classifier
We will do the following steps in order:



1.   Load and normalize the CIFAR10 training and test datasets using torchvision
2.   Define a Convolutional Neural Network
3.   Define a loss function
4.   Train the network on the training data
5.   Test the network on the test data

[Adapted from](https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html)
"""

import torch
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
from torchsummary import summary
import torch.optim as optim


def imshow(img):
    img = img / 2 + 0.5  # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


# Define a CNN model architecture

class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1)  # flatten all dimensions except batch
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


def train(NB_EPOCHS=2):
    # # Get cpu or gpu device for training.
    # device = "cuda" if torch.cuda.is_available() else "cpu"
    # print("Using {} device".format(device))

    # dataiter = iter(trainloader)
    # images, labels = next(dataiter)

    # CNN model instantiation
    net = Net()
    net.to(device)

    summary(net, input_size=(3, 32, 32))

    # Define a Loss function
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

    # Model/network training
    for epoch in range(NB_EPOCHS):  # loop over the dataset multiple times

        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            # get the inputs; data is a list of [inputs, labels]
            inputs, labels = data

            # to GPU
            if device != 'cpu':
                inputs, labels = inputs.to(device), labels.to(device)

            # zero the parameter gradients
            optimizer.zero_grad()

            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.item()
            if i % 2000 == 1999:  # print every 2000 mini-batches
                print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
                running_loss = 0.0

    print('Finished Training')

    # Save the model for future reference
    torch.save(net.state_dict(), MODEL_PATH)


def evaluate():
    # Load the model
    net = Net()
    net.to(device)

    net.load_state_dict(torch.load(MODEL_PATH, weights_only=True))

    # Test the network on test data

    correct = 0
    total = 0
    # since we're not training, we don't need to calculate the gradients for our outputs
    with torch.no_grad():
        for data in testloader:
            images, labels = data

            # to GPU
            if device != 'cpu':
                images, labels = images.to(device), labels.to(device)

            # calculate outputs by running images through the network
            outputs = net(images)
            # the class with the highest energy is what we choose as prediction
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print(f'Accuracy of the network on the 10000 test images: {100 * correct // total} %')


batch_size = 4
MODEL_PATH = '/mnt/home/hasanka/projects/dl-models-public/models/cifar_net.pth'
DATA_PATH = '/mnt/home/hasanka/projects/dl-models-public/data'

# Get cpu or gpu device for training.
device = "cuda" if torch.cuda.is_available() else "cpu"
print("Using {} device".format(device))

# Load and normalize CIFAR10 data
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
trainset = torchvision.datasets.CIFAR10(root=DATA_PATH, train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)
testset = torchvision.datasets.CIFAR10(root=DATA_PATH, train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)
classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

if __name__ == '__main__':
    # model training
    train()
    # model evaluation on the test set
    evaluate()

#
# """### Training on GPU"""

# device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
#
# # Assuming that we are on a CUDA machine, this should print a CUDA device:
#
# print(device)

# #The rest of this section assumes that device is a CUDA device.
#
# #Then these methods will recursively go over all modules and convert their parameters and buffers to CUDA tensors:
# net.to(device)
#
# #Remember that you will have to send the inputs and targets at every step to the GPU too:
# inputs, labels = data[0].to(device), data[1].to(device)

"""Why don’t I notice MASSIVE speedup compared to CPU? Because your network is really small.

**Exercise:** Try increasing the width of your network (argument 2 of the first nn.Conv2d, and argument 1 of the second nn.Conv2d – they need to be the same number), see what kind of speedup you get.

Goals achieved:

Understanding PyTorch’s Tensor library and neural networks at a high level.

Train a small neural network to classify images

Training on multiple GPUs
If you want to see even more MASSIVE speedup using all of your GPUs, please check out Optional: Data Parallelism.
"""
